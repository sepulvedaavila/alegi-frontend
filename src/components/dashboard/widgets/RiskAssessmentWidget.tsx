
import { AlertTriangle, CheckCircle, XCircle, Clock } from 'lucide-react';
import { useCaseAnalysis } from '@/hooks/useCaseAnalysis';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface RiskAssessmentWidgetProps {
  caseId?: string;
  isComparison?: boolean;
  caseData?: any;
}

const RiskAssessmentWidget = ({ caseId, isComparison = false, caseData = null }: RiskAssessmentWidgetProps) => {
  const { 
    riskAssessment, 
    predictions, 
    enrichment,
    isLoading, 
    errors, 
    analysisStatus 
  } = useCaseAnalysis(caseId);

  // Loading state
  if (isLoading) {
    return (
      <div className="space-y-3">
        <Skeleton className="h-4 w-48" />
        {[...Array(5)].map((_, i) => (
          <Skeleton key={i} className="h-12 w-full" />
        ))}
      </div>
    );
  }

  // Error state
  if (errors.length > 0 && analysisStatus === 'failed') {
    return (
      <Alert>
        <AlertDescription>
          Unable to load risk assessment. Analysis may be in progress.
        </AlertDescription>
      </Alert>
    );
  }

  const getRiskFactors = () => {
    // Priority: API risk assessment > Supabase predictions > enrichment > fallback
    if (riskAssessment?.riskFactors) {
      return riskAssessment.riskFactors.map((factor: any) => ({
        factor: factor.description || factor.name,
        impact: factor.severity || factor.impact || 'Medium',
        direction: factor.favorable ? 'In Favor' : 'Against',
        score: factor.score || 50
      }));
    }

    if (predictions?.risk_factors) {
      return predictions.risk_factors.map((factor: any, index: number) => ({
        factor: factor.description || factor,
        impact: factor.impact || ['High', 'Medium', 'Low'][index % 3],
        direction: factor.favorable !== false ? 'In Favor' : 'Against',
        score: factor.score || 50 + (index % 2 ? 20 : -20)
      }));
    }

    if (enrichment?.risk_assessment) {
      return enrichment.risk_assessment.factors?.map((factor: any) => ({
        factor: factor.description,
        impact: factor.severity,
        direction: factor.favorable ? 'In Favor' : 'Against',
        score: factor.score
      })) || [];
    }

    return [];
  };

  const factors = getRiskFactors();

  // Show analysis pending state
  if (factors.length === 0 && analysisStatus === 'pending') {
    return (
      <Alert>
        <Clock className="h-4 w-4" />
        <AlertDescription>
          Risk assessment is being generated by AI. Factors will appear here once analysis is complete.
        </AlertDescription>
      </Alert>
    );
  }

  // Fallback to mock data if no real data available
  const displayFactors = factors.length > 0 ? factors : [
    { factor: 'Analysis pending - case being processed', impact: 'Medium', direction: 'Pending', score: 50 }
  ];

  const renderRiskAssessment = (data: any, className = '') => {
    return (
      <div className={`space-y-3 ${className}`}>
        <div className="flex justify-between items-center">
          <h4 className="text-sm font-medium">
            {factors.length > 0 ? 'Key Risk Factors' : 'Risk Analysis Pending'}
          </h4>
          {riskAssessment?.overallRisk && (
            <span className={`text-xs px-2 py-1 rounded ${
              riskAssessment.overallRisk === 'Low' ? 'bg-green-100 text-green-800' :
              riskAssessment.overallRisk === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
              'bg-red-100 text-red-800'
            }`}>
              {riskAssessment.overallRisk} Risk
            </span>
          )}
        </div>
        
        <div className="space-y-2">
          {displayFactors.slice(0, 5).map((item, index) => (
            <div key={index} className="flex justify-between p-2 bg-gray-50 rounded-md">
              <div className="text-sm flex-1 pr-2">{item.factor}</div>
              <div className={`text-sm font-medium flex items-center ${
                item.direction === 'In Favor' ? 'text-green-600' : 
                item.direction === 'Against' ? 'text-red-600' : 'text-gray-600'
              }`}>
                {item.direction === 'In Favor' ? (
                  <CheckCircle size={14} className="mr-1" />
                ) : item.direction === 'Against' ? (
                  <XCircle size={14} className="mr-1" />
                ) : (
                  <Clock size={14} className="mr-1" />
                )}
                <span className="whitespace-nowrap">
                  {item.impact} ({item.direction})
                </span>
              </div>
            </div>
          ))}
        </div>

        {riskAssessment?.riskScore && (
          <div className="mt-3 p-2 bg-blue-50 rounded-md">
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium">Overall Risk Score</span>
              <span className="text-lg font-bold text-blue-600">
                {riskAssessment.riskScore}/100
              </span>
            </div>
          </div>
        )}

        {factors.length > 0 && (
          <div className="text-xs text-gray-500 mt-2">
            Analysis based on {factors.length} identified factors
          </div>
        )}
      </div>
    );
  };

  return (
    <div>
      {isComparison ? (
        <div className="grid grid-cols-2 gap-4">
          <div className="border-r pr-2">
            <h4 className="text-sm font-medium text-alegi-blue mb-2">Case A</h4>
            {renderRiskAssessment(caseData)}
          </div>
          <div className="pl-2">
            <h4 className="text-sm font-medium text-alegi-blue mb-2">Case B</h4>
            {renderRiskAssessment(caseData)}
          </div>
        </div>
      ) : (
        renderRiskAssessment(caseData)
      )}
    </div>
  );
};

export default RiskAssessmentWidget;
